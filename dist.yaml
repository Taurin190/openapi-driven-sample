openapi: 3.1.0
info:
  version: 1.0.0
  title: Taurin190.com
  termsOfService: https://example.com/terms/
  contact:
    email: contact@example.com
    url: http://example.com/contact
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  x-logo:
    url: https://redocly.github.io/openapi-template/logo.png
  description: |
    This is an **example** API to demonstrate features of the OpenAPI specification.

    # Introduction

    This API definition is intended to to be a good starting point for
    describing your API in 

    [OpenAPI/Swagger
    format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).

    It also demonstrates features of the
    [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool
    and 

    the [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond
    the standard OpenAPI syntax, we use a few 

    [vendor
    extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).


    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard,
    language-agnostic interface to REST APIs which

    allows both humans and computers to discover and understand the capabilities
    of the service without access to source

    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 

    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what

    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
tags:
  - name: User
    description: Operations about users.
servers:
  - url: https://{tenant}/api/v1
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://example.com/api/v1
paths:
  /api/users:
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - User
      summary: Get all users with pager
      description: |
        Get all active users with limited number and pages.
        You can select limit from 10, 50, 100.
      operationId: getUserByName
      parameters:
        - name: limit
          in: query
          description: Limit number users to acquire
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
      security:
        - main_auth:
            - read:users
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: user1
                email: user@example.com
        '400':
          description: Bad Request
          $ref: '#/components/responses/Problem'
        '403':
          description: Forbidden
          $ref: '#/components/responses/Problem'
  /api/users/{user_id}:
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - User
      summary: Get user detail by user id
      description: |
        Some description of the operation.
        You can use `Markdown` here.
      operationId: getUserByName
      parameters:
        - name: user_id
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
        - name: with_email
          in: query
          description: Filter users without email
          schema:
            type: boolean
      security:
        - main_auth:
            - read:users
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                user_id: user1
                email: user@example.com
        '403':
          description: Forbidden
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: The name that needs to be updated
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - write:users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
    delete:
      tags:
        - User
      summary: Delete user
      description: |
        Delete unnecessary users.
        User who has permisssion can delete users.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: The name that needs to be updated
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - write:users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
          $ref: '#/components/responses/Problem'
        '404':
          description: User not found
          $ref: '#/components/responses/Problem'
components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            read:users: read users info
            write:users: modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
  schemas:
    UserID:
      description: User Unique ID
      type: string
      format: uuid
      example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    RoleID:
      description: Role Unique ID
      type: string
      format: uuid
      example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    User:
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/UserID'
        userName:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
        createdAt:
          description: Created datetime
          type: string
          minLength: 1
          example: '2023-02-01T00:00:00'
        roleId:
          $ref: '#/components/schemas/RoleID'
    Problem:
      type: object
      additionalProperties: true
      minProperties: 1
      description: The Problem Details JSON Object [[RFC7807](https://tools.ietf.org/html/rfc7807)].
      properties:
        type:
          type: string
          description: A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be "about:blank".
          format: uri
        title:
          type: string
          description: A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
        status:
          type: integer
          description: The HTTP status code.
          minimum: 400
          maximum: 599
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
  responses:
    Problem:
      description: Problem
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
